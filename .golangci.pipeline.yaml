# More info on config here: https://golangci-lint.run/usage/configuration/#config-file
run:
  concurrency: 8
  timeout: 10m
  issues-exit-code: 1
  tests: true
  skip-dirs:
    - bin
    - vendor
    - var
    - tmp
  skip-files:
    - \.pb\.go$
    - \.pb\.gw\.go$
    - \.pb\.scratch\.go$
    - \.pb\.goclay\.go$
    - \.pb\.validate\.go$

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true

linters-settings:
  govet:
    check-shadowing: true
  dupl:
    threshold: 100
  goconst:
    min-len: 2
    min-occurrences: 2
  # Checks cognitive complexity of functions
  gocognit:
    min-complexity: 15
  lll:
    # Max line length, lines longer will be reported.
    line-length: 120
    # Tab width in spaces.
    tab-width: 4
  funlen:
    lines: 160
    statements: 45
  gomnd:
    ignored-numbers:
      - '2'
      - '10'
      - '32'
      - '64'
      - '100'
      - '1000'

linters:
  disable-all: true
  enable:
    #   - dupl - it's very slow, enable if you really know why you need it
    - errcheck # - Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - goconst # - Finds repeated strings that could be replaced by a constant
    - gosec # - Inspects source code for security problems
    - govet # - Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # - Detects when assignments to existing variables are not used
    - staticcheck # - Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - gosimple # - Linter for Go source code that specializes in simplifying a code
    - revive # - Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - typecheck # - Like the front-end of a Go compiler, parses and type-checks Go code
    - unused # - Checks Go code for unused constants, variables, functions and types
    - gocognit # - Computes and checks the cognitive complexity of functions
    #- nlreturn # - nlreturn checks for a new line before return and branch statements to increase code clarity
    - whitespace # - Tool for detection of leading and trailing whitespace
    - wsl # - Whitespace Linter - Forces you to use empty lines!
    - errname # - Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    - forcetypeassert # - finds forced type assertions
    - importas # - Enforces consistent import aliases
    #   - tagliatelle # - Checks the struct tags.
    #- unparam # - Reports unused function parameters
    - prealloc # - Finds slice declarations that could potentially be preallocated
    #    - paralleltest # - paralleltest detects missing usage of t.Parallel() method in your Go test
    - nestif # - Reports deeply nested if statements
    #- nilerr # - Finds the code that returns nil even if it checks that the error is not nil.
    - makezero # - Finds slice declarations with non-zero initial length
    #- lll # - Reports long lines
    - funlen # - Tool for detection of long functions
    - durationcheck # - check for two durations multiplied together
    - errorlint # - errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - forbidigo # - Forbids identifiers
    - gocyclo # - Computes and checks the cyclomatic complexity of functions
    - gomnd # - An analyzer to detect magic numbers
    - gofmt # -
    - misspell # - Finds commonly misspelled English words in comments
    #- testpackage # - linter that makes you use a separate _test package
    - thelper # - thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - tparallel # - tparallel detects inappropriate usage of t.Parallel() method in your Go test codes

issues:
  exclude-use-default: false
  exclude:
    # _ instead of err checks
    - G104
    #  Use of weak random number generator (math/rand instead of crypto/rand)
    - G404
    # for "public interface + private struct implementation" cases only!
    - exported func .* returns unexported type .*, which can be annoying to use
    # can be removed in the development phase
    # - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)
    # not for the active development - can be removed in the stable phase
    - should have a package comment
    - don't use an underscore in package name
    # EXC0001 errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked
    - should check returned error before deferring
    - should have comment
    - type name will be used as .* by other packages, and that stutters;
  exclude-rules:
    - linters:
        - lll
      # Игнорируем lll в импортах и //go: комментах
      source: ((github\.com|gitlab\.ozon\.ru|google\.golang\.org)\/|^\s*//go:|.*jsonschema.*)
    - path: _test\.go
      linters:
        - funlen
        - gosec
        - unparam
        - govet
